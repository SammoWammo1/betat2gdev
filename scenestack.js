var gdjs;(function(r){const l=new r.Logger("Scene stack"),h=new r.Logger("Multiplayer - Debug");class d{constructor(e){this._stack=[];this._wasFirstSceneLoaded=!1;this._isNextLayoutLoading=!1;this._sceneStackSyncDataToApply=null;this._wasDisposed=!1;if(!e)throw"SceneStack must be constructed with a gdjs.RuntimeGame.";this._runtimeGame=e}onGameResolutionResized(){for(let e=0;e<this._stack.length;++e)this._stack[e].onGameResolutionResized()}step(e){if(this._throwIfDisposed(),this._isNextLayoutLoading||this._stack.length===0)return!1;if(this.applyUpdateFromNetworkSyncDataIfAny())return h.info("Scene stack has been updated from network sync data, skipping step."),!0;const t=this._stack[this._stack.length-1];if(t.renderAndStep(e)){const n=t.getRequestedChange();if(n===r.SceneChangeRequest.STOP_GAME)return this._runtimeGame.getRenderer().stopGame(),!0;n===r.SceneChangeRequest.POP_SCENE?this.pop():n===r.SceneChangeRequest.PUSH_SCENE?this.push(t.getRequestedScene()):n===r.SceneChangeRequest.REPLACE_SCENE||n===r.SceneChangeRequest.CLEAR_SCENES?this.replace(t.getRequestedScene(),n===r.SceneChangeRequest.CLEAR_SCENES):l.error("Unrecognized change in scene stack: "+n)}return!0}renderWithoutStep(){return this._throwIfDisposed(),this._stack.length===0?!1:(this._stack[this._stack.length-1].render(),!0)}pop(e=1){this._throwIfDisposed();let s=!1;for(let t=0;t<e&&!(this._stack.length<=1);++t){s=!0;const n=this._stack.pop();if(!n)return;this._unloadSceneAndPossiblyResources({scene:n,newSceneName:null})}if(s){const t=this._stack[this._stack.length-1];t&&t.onResume()}}push(e,s){this._throwIfDisposed();const t=typeof e=="string"?e:e.sceneName,n=typeof e=="string"?!1:e.skipCreatingInstancesFromScene,i=typeof e=="string"?!1:e.skipStoppingSoundsOnStartup,a=s||(typeof e=="string"?void 0:e.externalLayoutName),c=this._stack[this._stack.length-1];return c&&c.onPause(),this._runtimeGame.areSceneAssetsReady(t)?this._loadNewScene({sceneName:t,externalLayoutName:a,skipCreatingInstancesFromScene:n,skipStoppingSoundsOnStartup:i}):(this._isNextLayoutLoading=!0,this._runtimeGame.loadSceneAssets(t).then(()=>{this._loadNewScene({sceneName:t,externalLayoutName:a,skipCreatingInstancesFromScene:n,skipStoppingSoundsOnStartup:i}),this._isNextLayoutLoading=!1}),null)}_loadNewScene(e){this._throwIfDisposed();const s=new r.RuntimeScene(this._runtimeGame);if(s.loadFromScene(this._runtimeGame.getSceneAndExtensionsData(e.sceneName),{skipCreatingInstances:e.skipCreatingInstancesFromScene,skipStoppingSoundsOnStartup:e.skipStoppingSoundsOnStartup}),this._wasFirstSceneLoaded=!0,e.externalLayoutName){const t=this._runtimeGame.getExternalLayoutData(e.externalLayoutName);t&&s.createObjectsFrom(t.instances,0,0,0,!0)}return this._stack.push(s),s}replace(e,s){const t=s||typeof e=="string"?!1:e.clear,n=typeof e=="string"?e:e.sceneName;if(this._throwIfDisposed(),t)for(;this._stack.length!==0;){let i=this._stack.pop();i&&this._unloadSceneAndPossiblyResources({scene:i,newSceneName:n})}else if(this._stack.length!==0){let i=this._stack.pop();i&&this._unloadSceneAndPossiblyResources({scene:i,newSceneName:n})}return this.push(e)}getCurrentScene(){return this._throwIfDisposed(),this._stack.length===0?null:this._stack[this._stack.length-1]}wasFirstSceneLoaded(){return this._wasFirstSceneLoaded}getAllScenes(){return this._throwIfDisposed(),this._stack}getAllSceneNames(){return this._throwIfDisposed(),this._stack.map(e=>e.getName())}getNetworkSyncData(e){const s=e.playerNumber,t=e.isHost;if(s!==void 0&&!t)return null;const n=[];for(let i=0;i<this._stack.length;++i){const a=this._stack[i];n.push({name:a.getName(),networkId:a.getOrCreateNetworkId()})}return n}updateFromNetworkSyncData(e){this._sceneStackSyncDataToApply=e}applyUpdateFromNetworkSyncDataIfAny(e){this._throwIfDisposed();const s=this._sceneStackSyncDataToApply;let t=!1;if(!s)return t;this._sceneStackSyncDataToApply=null;const n=!!e&&!!e.preventInitialInstancesCreation,i=!!e&&!!e.preventSoundsStoppingOnStartup;if(e&&e.clearSceneStack){for(;this._stack.length!==0;){let a=this._stack.pop();a&&a.unloadScene()}for(let a=0;a<s.length;++a){const c=s[a],o=this.push({sceneName:c.name,skipCreatingInstancesFromScene:n,skipStoppingSoundsOnStartup:i});o&&(o.networkId=c.networkId)}return t=!0,t}for(let a=0;a<s.length;++a){const c=s[a],o=this._stack[a];if(!o){h.info(`Scene at position ${a} with name ${c.name} is missing from the stack, adding it.`);const u=this.push({sceneName:c.name,skipCreatingInstancesFromScene:n});u&&(u.networkId=c.networkId),t=!0;continue}if(o.getName()!==c.name){h.info(`Scene at position ${a} and name ${o.getName()} is not the same as the expected ${c.name}, replacing.`);const u=this.replace({sceneName:c.name,clear:!0,skipCreatingInstancesFromScene:n});u&&(u.networkId=c.networkId),t=!0;continue}if(!o.networkId&&c.networkId&&c.name===o.getName()){h.info(`Scene at position ${a} and name ${o.getName()} has no networkId, let's assume it's the right one and reconcile it with the id ${c.networkId}.`),o.networkId=c.networkId;continue}if(o.networkId!==c.networkId){h.info(`Scene at position ${a} and name ${o.getName()} has a different networkId ${o.networkId} than the expected ${c.networkId}, replacing.`);const u=this.replace({sceneName:c.name,clear:!1,skipCreatingInstancesFromScene:n});u&&(u.networkId=c.networkId),t=!0;continue}}if(this._stack.length>s.length){const a=this._stack.length-s.length;this.pop(a),t=!0}return t}dispose(){for(;this._stack.length>0;){const e=this._stack.pop();e&&this._unloadSceneAndPossiblyResources({scene:e,newSceneName:null})}this._wasDisposed=!0}_unloadSceneAndPossiblyResources({scene:e,newSceneName:s}){const t=e.getName(),n=e.getResourcesUnloading(),a=(n==="inherit"?this._runtimeGame.getSceneResourcesUnloading():n)==="at-scene-exit"&&s!==e.getName()&&this._stack.every(c=>c.getName()!==t);e.unloadScene(),a&&this._runtimeGame.getResourceLoader().unloadSceneResources({unloadedSceneName:t,newSceneName:s})}_throwIfDisposed(){if(this._wasDisposed)throw"The scene stack has been disposed and should not be used anymore."}}r.SceneStack=d})(gdjs||(gdjs={}));
//# sourceMappingURL=scenestack.js.map
